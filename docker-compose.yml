services:

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    command: python3 bot/main.py
    restart: always
    env_file:
      - .env
    volumes:
      - ./data:/app/data
      - ./media/photo:/app/admin_panel/media/photo
      - ./media/mailings:/app/admin_panel/media/mailings
    networks:
      - app-network

  db:
    image: postgres:16-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - ./postgres_db:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - "postgres"
      - "-c"
      - "max_connections=1000"
    ports:
      - "5432:5432"
    networks:
      - app-network

  admin-panel:
    build:
      context: .
      dockerfile: Dockerfile
    command: |
      bash -c "python3 admin_panel/manage.py migrate &&
               python3 admin_panel/manage.py create_superuser_command"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  run-server:
    build:
      context: .
      dockerfile: Dockerfile
    command: python3 admin_panel/manage.py runserver 0.0.0.0:8000
    restart: always
    volumes:
      - ./data:/app/data
      - ./media/photo:/app/admin_panel/media/photo
      - ./media/mailings:/app/admin_panel/media/mailings
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
